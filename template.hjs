'use strict';

const Bluebird = require('bluebird');
const Slambda = require('slambda');

const TIMEOUT = {{container.timeout}} * 1000;

let slambda = new Slambda({
  autoDeploy: false,
})
.container('{{container.id}}');

// Initialization
{{#lifecycle}}
  {{#init}}
module.exports.init = Bluebird.method({{{init}}})();
  {{/init}}
  {{^init}}
module.exports.init = Bluebird.resolve();
  {{/init}}
{{/lifecycle}}

{{#methods}}
slambda.method('{{id}}', '{{{code}}}');
{{/methods}}


const init = slambda.deploy();

module.exports.main = (calls) => {
  return init.then(() =>
    Bluebird.all(
      calls.map(method => run(method.id, method.arguments))
    )
  );
}

function run(id, args) {
  return slambda.run(id, args)
    .timeout(TIMEOUT)
    .catch(Bluebird.TimeoutError, function(e) {
      let err = new Error(`Function timeout out in ${TIMEOUT}ms`)
      console.error(err);
      throw err;
    })
    .reflect()
    .then(result => {
      if (result.isRejected()) {
        return result.reason();
      }
      return result.value();
    })
}
